"""Необходимо реализовать функцию для выборки станций, покрывающих наибольшее количество штатов.
Станции имеют между собой пересечений. Каждая станция стоит денег, поэтому количество станций необходимо свести к
минимуму
Имеется список станций:
Радиостанция | Доступна в штатах
    KONE     |  id, nv, ut
    KTWO     |  wa, id, mt
    KTHREE   |  or, nv, ca
    KFOUR    |  nv, ut
    KFIVE    |  ca, az
    """

"""
1. Составить список всех возможных подмножеств станций - степенное множество (2 ^ n возможных множеств)
2. Из итогового списка выбирается множество с наименьшим набором станций, покрывающих все 50 штатов
"""


"""
Использую "жадный" алгоритм, который выдаст результат, достаточно близкий к оптимуму:
1. Выбрать станцию, покрывающую наибольшее количество штатов, ещё не входящих в покрытие
2. Повторять, пока остаются штаты, не входящие в покрытие
"""


# состав списка штатов
states_needed = {'mt', 'wa', 'or', 'id', 'nv', 'ut', 'ca', 'az'}
print(states_needed)

# список станций, из которых будут выбираться покрытия, используя хэш
stations = {}
stations['kone'] = {'id', 'nv', 'ut'}
stations['ktwo'] = {'wa', 'id', 'mt'}
stations['kthree'] = {'or', 'nv', 'ca'}
stations['kfour'] = {'nv', 'ut'}
stations['kfive'] = {'ca', 'az'}

# структура данных для хранения итогового набора станций
final_stations = set()

"""Вычисление ответа
Переберем все станции и выберем ту, которая обслуживает больше всего штатов, не входящих в текущее покрытие
назовём её best_station"""
def make_station():
    while states_needed:
        best_station = None
        # Содержит все штаты, обслуживаемые этой станцией
        states_covered = set()
        # цикл for перебирает все станции и находит среди них наилучшую
        for station, states_for_station in stations.items:
            # covered содержит штаты, присутствующие как в списке штатов и в станциях для штатов
            covered = states_covered & states_for_station
            # если условие выполняется, то станция сохраняется в best_station
            if len(covered) > len(states_covered):
                best_station = station
                states_covered = covered
            final_stations.add(best_station)
            # цикл продолжается, пока states_needed не станет пустым
            states_needed -= states_covered


print(make_station())